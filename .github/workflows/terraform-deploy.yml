name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths:
      - "terraform/**"
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-west-2
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Check Available MySQL Versions
        run: |
          echo "Checking available MySQL versions in RDS..."
          aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion" --output text
        continue-on-error: true

      - name: Terraform Init
        run: terraform init

      - name: Import existing resources (if any)
        run: |
          # This step tries to import existing resources and ignores errors if they don't exist
          echo "Importing S3 buckets..."
          terraform import module.frontend.aws_s3_bucket.frontend renewable-energy-frontend-west-2 || echo "Frontend bucket doesn't exist yet"
          terraform import module.backend.aws_s3_bucket.app_versions renewable-energy-app-app-versions || echo "App versions bucket doesn't exist yet" 

          echo "Importing Elastic Beanstalk application and environment..."
          terraform import module.backend.aws_elastic_beanstalk_application.app renewable-energy-app || echo "EB application doesn't exist yet"
          terraform import module.backend.aws_elastic_beanstalk_environment.env production-env || echo "EB environment doesn't exist yet"

          echo "Importing database resources..."
          terraform import module.database.aws_db_parameter_group.renewable_energy renewable-energy-pg || echo "DB parameter group doesn't exist yet"
          terraform import module.database.aws_security_group.db_security_group $(aws ec2 describe-security-groups --filters Name=group-name,Values=renewable-energy-db-sg --query "SecurityGroups[0].GroupId" --output text || echo "sg-notfound") || echo "Security group doesn't exist yet"
          terraform import module.database.aws_db_instance.database renewable-energy-db || echo "RDS database doesn't exist yet"

          echo "Importing IAM roles..."
          terraform import module.backend.aws_iam_role.eb_service_role renewable-energy-app-eb-service-role || echo "Service role doesn't exist yet"
          terraform import module.backend.aws_iam_role.eb_instance_role renewable-energy-app-eb-instance-role || echo "Instance role doesn't exist yet"
          terraform import module.backend.aws_iam_instance_profile.eb_instance_profile renewable-energy-app-eb-instance-profile || echo "Instance profile doesn't exist yet"
        continue-on-error: true

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: |
          # Apply with targets to create resources that don't exist yet
          terraform apply -auto-approve -input=false || \
          # If error occurs due to resource exists, try with specific target resources
          terraform apply -auto-approve -input=false -target=module.frontend -target=module.database || \
          # If everything fails, just output the state
          terraform state list

      - name: Output Environment Information
        if: success()
        run: |
          echo "Frontend URL: $(terraform output -raw frontend_url)"
          echo "Backend URL: $(terraform output -raw backend_url)"
          echo "Database Endpoint: $(terraform output -raw database_endpoint)"
